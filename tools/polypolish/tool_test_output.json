{"version": "0.1", "tests": [{"id": "functional.test_toolbox.TestForTool_polypolish.test_tool_000000", "has_data": true, "data": {"tool_id": "polypolish", "tool_version": "0.5.0+galaxy0", "test_index": 0, "time_seconds": 13.723236799240112, "inputs": {"input|fasta_file": {"src": "hda", "id": "8db726557bdf8614"}, "input|sam_data_type|sam_selector": "single", "input|sam_data_type|single_sam": {"src": "hda", "id": "a9e56cd79bca59ab"}}, "job": {"model_class": "Job", "id": "3b55d1c9d0d9d3c9", "state": "ok", "exit_code": 0, "update_time": "2022-09-14T14:08:23.127344", "create_time": "2022-09-14T14:08:19.177926", "galaxy_version": "22.05", "command_version": "Polypolish v0.5.0", "tool_id": "polypolish", "history_id": "8a281cb71183ee8f", "external_id": "94420", "command_line": "ln -s '/tmp/tmpacfaqf7s/files/f/7/3/dataset_f735cb19-87a3-4cb4-b3eb-880cf85bd49f.dat' input_data && polypolish input_data /tmp/tmpacfaqf7s/files/7/e/e/dataset_7ee818c0-1258-4702-aefe-bf16ef1b5cd3.dat > '/tmp/tmpacfaqf7s/job_working_directory/000/35/outputs/galaxy_dataset_331aebca-33b1-44df-8f02-14fb3e5391db.dat' --debug /tmp/tmpacfaqf7s/job_working_directory/000/35/outputs/galaxy_dataset_d914a54d-c202-4891-9cd9-cda8a78abd32.dat 2> '/tmp/tmpacfaqf7s/job_working_directory/000/35/outputs/galaxy_dataset_fb286745-3615-4baa-b2db-00838e84121d.dat'", "traceback": null, "params": {"input": "{\"fasta_file\": {\"values\": [{\"id\": 39, \"src\": \"hda\"}]}, \"sam_data_type\": {\"__current_case__\": 0, \"sam_selector\": \"single\", \"single_sam\": {\"values\": [{\"id\": 40, \"src\": \"hda\"}]}}}", "options": "{\"debug\": \"true\", \"fraction_invalid\": \"0.2\", \"fraction_valid\": \"0.5\", \"max_errors\": \"10\", \"min_depth\": \"5\", \"no_logfile\": \"true\"}", "chromInfo": "\"/tmp/tmpacfaqf7s/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fasta_file": {"id": "8db726557bdf8614", "src": "hda", "uuid": "f735cb19-87a3-4cb4-b3eb-880cf85bd49f"}, "input|single_sam": {"id": "a9e56cd79bca59ab", "src": "hda", "uuid": "7ee818c0-1258-4702-aefe-bf16ef1b5cd3"}}, "outputs": {"polished_fasta": {"id": "7a853ca3f2355c18", "src": "hda", "uuid": "331aebca-33b1-44df-8f02-14fb3e5391db"}, "debug_file": {"id": "b10a578a4a5491ea", "src": "hda", "uuid": "d914a54d-c202-4891-9cd9-cda8a78abd32"}, "logfile": {"id": "7b0527be6fc98aeb", "src": "hda", "uuid": "fb286745-3615-4baa-b2db-00838e84121d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "test@bx.psu.edu", "job_metrics": []}, "status": "success"}}, {"id": "functional.test_toolbox.TestForTool_polypolish.test_tool_000001", "has_data": true, "data": {"tool_id": "polypolish", "tool_version": "0.5.0+galaxy0", "test_index": 1, "time_seconds": 18.081711530685425, "inputs": {"input|fasta_file": {"src": "hda", "id": "802a8215905b0358"}, "input|sam_data_type|R1_sam": {"src": "hda", "id": "385957d1758d45ab"}, "input|sam_data_type|R2_sam": {"src": "hda", "id": "a74c9980b2fdd2d0"}, "input|sam_data_type|sam_selector": "paired", "options|debug": true, "options|no_logfile": false}, "job": {"model_class": "Job", "id": "8db726557bdf8614", "state": "ok", "exit_code": 0, "update_time": "2022-09-14T14:08:41.468791", "create_time": "2022-09-14T14:08:37.598324", "galaxy_version": "22.05", "command_version": "Polypolish v0.5.0", "tool_id": "polypolish", "history_id": "ecefcee0da04b608", "external_id": "94811", "command_line": "ln -s '/tmp/tmpacfaqf7s/files/9/9/f/dataset_99f2e4cd-97aa-4587-84b3-5897e81879b8.dat' input_data && polypolish_insert_filter.py --low '0.1' --high '99.9' --in1 '/tmp/tmpacfaqf7s/files/0/4/0/dataset_0409b1eb-96d5-4405-a59f-ccac1738d805.dat' --in2 '/tmp/tmpacfaqf7s/files/f/4/e/dataset_f4ea288f-d98d-4354-b5fc-6aa554df213a.dat' --out1 'filtered_1.sam' --out2 'filtered_2.sam' && polypolish input_data 'filtered_1.sam' 'filtered_2.sam' >  /tmp/tmpacfaqf7s/job_working_directory/000/39/outputs/galaxy_dataset_875b039f-7f33-4f48-a941-92091bafad3a.dat --debug /tmp/tmpacfaqf7s/job_working_directory/000/39/outputs/galaxy_dataset_470ef275-c69f-46d7-a10e-a95952c20b39.dat", "traceback": null, "params": {"input": "{\"fasta_file\": {\"values\": [{\"id\": 44, \"src\": \"hda\"}]}, \"sam_data_type\": {\"R1_sam\": {\"values\": [{\"id\": 45, \"src\": \"hda\"}]}, \"R2_sam\": {\"values\": [{\"id\": 46, \"src\": \"hda\"}]}, \"__current_case__\": 1, \"insert_filter\": {\"__current_case__\": 0, \"filter_select\": \"filter\", \"high\": \"99.9\", \"low\": \"0.1\"}, \"sam_selector\": \"paired\"}}", "options": "{\"debug\": \"true\", \"fraction_invalid\": \"0.2\", \"fraction_valid\": \"0.5\", \"max_errors\": \"10\", \"min_depth\": \"5\", \"no_logfile\": \"false\"}", "chromInfo": "\"/tmp/tmpacfaqf7s/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fasta_file": {"id": "802a8215905b0358", "src": "hda", "uuid": "99f2e4cd-97aa-4587-84b3-5897e81879b8"}, "input|R1_sam": {"id": "385957d1758d45ab", "src": "hda", "uuid": "0409b1eb-96d5-4405-a59f-ccac1738d805"}, "input|R2_sam": {"id": "a74c9980b2fdd2d0", "src": "hda", "uuid": "f4ea288f-d98d-4354-b5fc-6aa554df213a"}}, "outputs": {"polished_fasta": {"id": "52b681ae296e2a3a", "src": "hda", "uuid": "875b039f-7f33-4f48-a941-92091bafad3a"}, "debug_file": {"id": "e3ea0f7c221fd92f", "src": "hda", "uuid": "470ef275-c69f-46d7-a10e-a95952c20b39"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/0/4/0/dataset_0409b1eb-96d5-4405-a59f-ccac1738d805.dat\n  /tmp/tmpacfaqf7s/files/f/4/e/dataset_f4ea288f-d98d-4354-b5fc-6aa554df213a.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n/tmp/tmpacfaqf7s/files/0/4/0/dataset_0409b1eb-96d5-4405-a59f-ccac1738d805.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/f/4/e/dataset_f4ea288f-d98d-4354-b5fc-6aa554df213a.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/0/4/0/dataset_0409b1eb-96d5-4405-a59f-ccac1738d805.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/f/4/e/dataset_f4ea288f-d98d-4354-b5fc-6aa554df213a.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019271\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  --debug /tmp/tmpacfaqf7s/job_working_directory/000/39/outputs/galaxy_dataset_470ef275-c69f-46d7-a10e-a95952c20b39.dat\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nPer-base debugging info written to /tmp/tmpacfaqf7s/job_working_directory/000/39/outputs/galaxy_dataset_470ef275-c69f-46d7-a10e-a95952c20b39.dat\nTime to run: 0:00:00.021800\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/0/4/0/dataset_0409b1eb-96d5-4405-a59f-ccac1738d805.dat\n  /tmp/tmpacfaqf7s/files/f/4/e/dataset_f4ea288f-d98d-4354-b5fc-6aa554df213a.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n/tmp/tmpacfaqf7s/files/0/4/0/dataset_0409b1eb-96d5-4405-a59f-ccac1738d805.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/f/4/e/dataset_f4ea288f-d98d-4354-b5fc-6aa554df213a.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/0/4/0/dataset_0409b1eb-96d5-4405-a59f-ccac1738d805.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/f/4/e/dataset_f4ea288f-d98d-4354-b5fc-6aa554df213a.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019271\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  --debug /tmp/tmpacfaqf7s/job_working_directory/000/39/outputs/galaxy_dataset_470ef275-c69f-46d7-a10e-a95952c20b39.dat\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:08:38)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nPer-base debugging info written to /tmp/tmpacfaqf7s/job_working_directory/000/39/outputs/galaxy_dataset_470ef275-c69f-46d7-a10e-a95952c20b39.dat\nTime to run: 0:00:00.021800\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "test@bx.psu.edu", "job_metrics": []}, "status": "success"}}, {"id": "functional.test_toolbox.TestForTool_polypolish.test_tool_000002", "has_data": true, "data": {"tool_id": "polypolish", "tool_version": "0.5.0+galaxy0", "test_index": 2, "time_seconds": 21.998911142349243, "inputs": {"input|fasta_file": {"src": "hda", "id": "ea3eb65e2ce7681c"}, "input|sam_data_type|sam_selector": "multiple_single", "input|sam_data_type|single_collection": {"src": "hdca", "id": "dc483b0ffdb7209d"}, "options|debug": false, "options|no_logfile": true}, "job": {"model_class": "Job", "id": "802a8215905b0358", "state": "ok", "exit_code": 0, "update_time": "2022-09-14T14:09:03.649190", "create_time": "2022-09-14T14:09:00.013523", "galaxy_version": "22.05", "command_version": "Polypolish v0.5.0", "tool_id": "polypolish", "history_id": "9ff3fcdc770374ee", "external_id": "95259", "command_line": "ln -s '/tmp/tmpacfaqf7s/files/7/5/0/dataset_75023076-0831-49ed-8e73-7c256f4d11dd.dat' input_data && mkdir single_collection && ln -s /tmp/tmpacfaqf7s/files/7/3/f/dataset_73fdb1b6-03d7-4df7-9c6c-b579446a9661.dat 'single_collection/R1_sam.sam' && ln -s /tmp/tmpacfaqf7s/files/2/e/a/dataset_2ea1822c-90e4-40b3-aa85-2f790e031bb0.dat 'single_collection/R1_bis_sam.sam' && ln -s /tmp/tmpacfaqf7s/files/2/c/8/dataset_2c81eec9-9dca-4ea1-9995-b0282b7d74b8.dat 'single_collection/R1_ter_sam.sam' && polypolish input_data single_collection/*.sam > '/tmp/tmpacfaqf7s/job_working_directory/000/44/outputs/galaxy_dataset_5b2c6e5e-c774-4126-835a-8011b641db8e.dat' 2> '/tmp/tmpacfaqf7s/job_working_directory/000/44/outputs/galaxy_dataset_dcfacfd6-58a2-4d75-8079-92ab5f0200f9.dat'", "traceback": null, "params": {"input": "{\"fasta_file\": {\"values\": [{\"id\": 49, \"src\": \"hda\"}]}, \"sam_data_type\": {\"__current_case__\": 2, \"sam_selector\": \"multiple_single\", \"single_collection\": {\"values\": [{\"id\": 3, \"src\": \"hdca\"}]}}}", "options": "{\"debug\": \"false\", \"fraction_invalid\": \"0.2\", \"fraction_valid\": \"0.5\", \"max_errors\": \"10\", \"min_depth\": \"5\", \"no_logfile\": \"true\"}", "chromInfo": "\"/tmp/tmpacfaqf7s/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fasta_file": {"id": "ea3eb65e2ce7681c", "src": "hda", "uuid": "75023076-0831-49ed-8e73-7c256f4d11dd"}, "input|single_collection1": {"id": "9495e46485f94c8d", "src": "hda", "uuid": "73fdb1b6-03d7-4df7-9c6c-b579446a9661"}, "input|single_collection2": {"id": "ca419e6ebe45ee26", "src": "hda", "uuid": "2ea1822c-90e4-40b3-aa85-2f790e031bb0"}, "input|single_collection3": {"id": "f22fbf3d4c335b64", "src": "hda", "uuid": "2c81eec9-9dca-4ea1-9995-b0282b7d74b8"}}, "outputs": {"polished_fasta": {"id": "9d2165de40902204", "src": "hda", "uuid": "5b2c6e5e-c774-4126-835a-8011b641db8e"}, "logfile": {"id": "1ff23a4a6b9b9262", "src": "hda", "uuid": "dcfacfd6-58a2-4d75-8079-92ab5f0200f9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "test@bx.psu.edu", "job_metrics": []}, "status": "success"}}, {"id": "functional.test_toolbox.TestForTool_polypolish.test_tool_000003", "has_data": true, "data": {"tool_id": "polypolish", "tool_version": "0.5.0+galaxy0", "test_index": 3, "time_seconds": 36.60528588294983, "inputs": {"input|fasta_file": {"src": "hda", "id": "898cada764a34eed"}, "input|sam_data_type|paired_collection": {"src": "hdca", "id": "8d4b2e28361cec8a"}, "input|sam_data_type|sam_selector": "multiple_paired"}, "job": {"model_class": "Job", "id": "f22fbf3d4c335b64", "state": "ok", "exit_code": 0, "update_time": "2022-09-14T14:09:40.399634", "create_time": "2022-09-14T14:09:35.986099", "galaxy_version": "22.05", "command_version": "Polypolish v0.5.0", "tool_id": "polypolish", "history_id": "eb3329004f39c021", "external_id": "95893", "command_line": "ln -s '/tmp/tmpacfaqf7s/files/4/3/4/dataset_434744eb-2d6e-4666-80a1-d5223102588b.dat' input_data && mkdir paired_collection && ln -s '/tmp/tmpacfaqf7s/files/9/1/c/dataset_91ce478e-3360-43fd-a9cc-2982331270e9.dat' 'paired_collection/forward_input0forward.sam' && ln -s '/tmp/tmpacfaqf7s/files/9/f/4/dataset_9f49c27b-4571-411d-9a75-fe086d4dcaff.dat' 'paired_collection/reverse_input0reverse.sam' && polypolish_insert_filter.py --low '0.1' --high '99.9' --in1 'paired_collection/forward_input0forward.sam' --in2 'paired_collection/reverse_input0reverse.sam' --out1 'paired_collection/forward_input0forward_filtered.sam' --out2 'paired_collection/reverse_input0reverse_filtered.sam' && ln -s '/tmp/tmpacfaqf7s/files/2/0/b/dataset_20b834a7-c6c8-437d-8ec7-2304ca637d9f.dat' 'paired_collection/forward_input1forward.sam' && ln -s '/tmp/tmpacfaqf7s/files/f/7/0/dataset_f70b5752-330a-4877-b679-342d1d5927ac.dat' 'paired_collection/reverse_input1reverse.sam' && polypolish_insert_filter.py --low '0.1' --high '99.9' --in1 'paired_collection/forward_input1forward.sam' --in2 'paired_collection/reverse_input1reverse.sam' --out1 'paired_collection/forward_input1forward_filtered.sam' --out2 'paired_collection/reverse_input1reverse_filtered.sam' && ln -s '/tmp/tmpacfaqf7s/files/4/6/3/dataset_4635a890-0914-4ab5-ad2d-41b04a71d2fb.dat' 'paired_collection/forward_input2forward.sam' && ln -s '/tmp/tmpacfaqf7s/files/e/0/b/dataset_e0b4f5c1-6c62-407f-b50f-0b13935d0f70.dat' 'paired_collection/reverse_input2reverse.sam' && polypolish_insert_filter.py --low '0.1' --high '99.9' --in1 'paired_collection/forward_input2forward.sam' --in2 'paired_collection/reverse_input2reverse.sam' --out1 'paired_collection/forward_input2forward_filtered.sam' --out2 'paired_collection/reverse_input2reverse_filtered.sam' && polypolish input_data paired_collection/*_filtered.sam > '/tmp/tmpacfaqf7s/job_working_directory/000/52/outputs/galaxy_dataset_d4802f70-2d41-4d57-a8ed-df57a7c566de.dat' --debug /tmp/tmpacfaqf7s/job_working_directory/000/52/outputs/galaxy_dataset_6f593285-9b8e-4b51-bb51-8b579cf4af07.dat 2> '/tmp/tmpacfaqf7s/job_working_directory/000/52/outputs/galaxy_dataset_1af70fde-4259-4e4a-8106-8a133cc6b68e.dat'", "traceback": null, "params": {"input": "{\"fasta_file\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"sam_data_type\": {\"__current_case__\": 3, \"insert_filter\": {\"__current_case__\": 0, \"filter_select\": \"filter\", \"high\": \"99.9\", \"low\": \"0.1\"}, \"paired_collection\": {\"values\": [{\"id\": 4, \"src\": \"hdca\"}]}, \"sam_selector\": \"multiple_paired\"}}", "options": "{\"debug\": \"true\", \"fraction_invalid\": \"0.2\", \"fraction_valid\": \"0.5\", \"max_errors\": \"10\", \"min_depth\": \"5\", \"no_logfile\": \"true\"}", "chromInfo": "\"/tmp/tmpacfaqf7s/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fasta_file": {"id": "898cada764a34eed", "src": "hda", "uuid": "434744eb-2d6e-4666-80a1-d5223102588b"}, "input|paired_collection1": {"id": "b0c7e138c069ce49", "src": "hda", "uuid": "91ce478e-3360-43fd-a9cc-2982331270e9"}, "input|paired_collection2": {"id": "23d418081ffa879b", "src": "hda", "uuid": "9f49c27b-4571-411d-9a75-fe086d4dcaff"}, "input|paired_collection3": {"id": "079a11b80762b6ad", "src": "hda", "uuid": "20b834a7-c6c8-437d-8ec7-2304ca637d9f"}, "input|paired_collection4": {"id": "cba6d4898907afad", "src": "hda", "uuid": "f70b5752-330a-4877-b679-342d1d5927ac"}, "input|paired_collection5": {"id": "acb6105b121c7555", "src": "hda", "uuid": "4635a890-0914-4ab5-ad2d-41b04a71d2fb"}, "input|paired_collection6": {"id": "cfa87f15f2a4c53f", "src": "hda", "uuid": "e0b4f5c1-6c62-407f-b50f-0b13935d0f70"}}, "outputs": {"polished_fasta": {"id": "fddc82b8663cec42", "src": "hda", "uuid": "d4802f70-2d41-4d57-a8ed-df57a7c566de"}, "debug_file": {"id": "3962915ec4371308", "src": "hda", "uuid": "6f593285-9b8e-4b51-bb51-8b579cf4af07"}, "logfile": {"id": "2b05a76bd786bd52", "src": "hda", "uuid": "1af70fde-4259-4e4a-8106-8a133cc6b68e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  paired_collection/forward_input0forward.sam\n  paired_collection/reverse_input0reverse.sam\n\nOutput alignments:\n  paired_collection/forward_input0forward_filtered.sam\n  paired_collection/reverse_input0reverse_filtered.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\npaired_collection/forward_input0forward.sam: 75 alignments from 72 reads\npaired_collection/reverse_input0reverse.sam: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering paired_collection/forward_input0forward.sam:\n  1,408 pass\n  4 fail\n\nFiltering paired_collection/reverse_input0reverse.sam:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.022317\n\n\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  paired_collection/forward_input1forward.sam\n  paired_collection/reverse_input1reverse.sam\n\nOutput alignments:\n  paired_collection/forward_input1forward_filtered.sam\n  paired_collection/reverse_input1reverse_filtered.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\npaired_collection/forward_input1forward.sam: 75 alignments from 72 reads\npaired_collection/reverse_input1reverse.sam: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering paired_collection/forward_input1forward.sam:\n  1,408 pass\n  4 fail\n\nFiltering paired_collection/reverse_input1reverse.sam:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019450\n\n\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  paired_collection/forward_input2forward.sam\n  paired_collection/reverse_input2reverse.sam\n\nOutput alignments:\n  paired_collection/forward_input2forward_filtered.sam\n  paired_collection/reverse_input2reverse_filtered.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\npaired_collection/forward_input2forward.sam: 75 alignments from 72 reads\npaired_collection/reverse_input2reverse.sam: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering paired_collection/forward_input2forward.sam:\n  1,408 pass\n  4 fail\n\nFiltering paired_collection/reverse_input2reverse.sam:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019046\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  paired_collection/forward_input0forward.sam\n  paired_collection/reverse_input0reverse.sam\n\nOutput alignments:\n  paired_collection/forward_input0forward_filtered.sam\n  paired_collection/reverse_input0reverse_filtered.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\npaired_collection/forward_input0forward.sam: 75 alignments from 72 reads\npaired_collection/reverse_input0reverse.sam: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering paired_collection/forward_input0forward.sam:\n  1,408 pass\n  4 fail\n\nFiltering paired_collection/reverse_input0reverse.sam:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.022317\n\n\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  paired_collection/forward_input1forward.sam\n  paired_collection/reverse_input1reverse.sam\n\nOutput alignments:\n  paired_collection/forward_input1forward_filtered.sam\n  paired_collection/reverse_input1reverse_filtered.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\npaired_collection/forward_input1forward.sam: 75 alignments from 72 reads\npaired_collection/reverse_input1reverse.sam: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering paired_collection/forward_input1forward.sam:\n  1,408 pass\n  4 fail\n\nFiltering paired_collection/reverse_input1reverse.sam:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019450\n\n\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  paired_collection/forward_input2forward.sam\n  paired_collection/reverse_input2reverse.sam\n\nOutput alignments:\n  paired_collection/forward_input2forward_filtered.sam\n  paired_collection/reverse_input2reverse_filtered.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\npaired_collection/forward_input2forward.sam: 75 alignments from 72 reads\npaired_collection/reverse_input2reverse.sam: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering paired_collection/forward_input2forward.sam:\n  1,408 pass\n  4 fail\n\nFiltering paired_collection/reverse_input2reverse.sam:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:37)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019046\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "test@bx.psu.edu", "job_metrics": []}, "status": "success"}}, {"id": "functional.test_toolbox.TestForTool_polypolish.test_tool_000004", "has_data": true, "data": {"tool_id": "polypolish", "tool_version": "0.5.0+galaxy0", "test_index": 4, "time_seconds": 18.578250885009766, "inputs": {"input|fasta_file": {"src": "hda", "id": "6083f60e8ab5535f"}, "input|sam_data_type|R1_sam": {"src": "hda", "id": "1c7e2b77ef2b77ed"}, "input|sam_data_type|R2_sam": {"src": "hda", "id": "79b04b5119063490"}, "input|sam_data_type|sam_selector": "paired", "options|debug": false, "options|no_logfile": false}, "job": {"model_class": "Job", "id": "b0c7e138c069ce49", "state": "ok", "exit_code": 0, "update_time": "2022-09-14T14:09:59.163686", "create_time": "2022-09-14T14:09:55.258433", "galaxy_version": "22.05", "command_version": "Polypolish v0.5.0", "tool_id": "polypolish", "history_id": "8cf131f4e3531a1b", "external_id": "96294", "command_line": "ln -s '/tmp/tmpacfaqf7s/files/6/5/d/dataset_65d2d396-3ea9-41ee-964a-7b751e0b0849.dat' input_data && polypolish_insert_filter.py --low '0.1' --high '99.9' --in1 '/tmp/tmpacfaqf7s/files/3/6/e/dataset_36ea3cc3-d910-450c-8071-7acf82ef2e1f.dat' --in2 '/tmp/tmpacfaqf7s/files/2/6/1/dataset_26176395-7cd4-4407-8aeb-cf33bd6cd067.dat' --out1 'filtered_1.sam' --out2 'filtered_2.sam' && polypolish input_data 'filtered_1.sam' 'filtered_2.sam' >  /tmp/tmpacfaqf7s/job_working_directory/000/56/outputs/galaxy_dataset_1789dc75-ed18-4715-9054-d2a324c2762a.dat", "traceback": null, "params": {"input": "{\"fasta_file\": {\"values\": [{\"id\": 65, \"src\": \"hda\"}]}, \"sam_data_type\": {\"R1_sam\": {\"values\": [{\"id\": 66, \"src\": \"hda\"}]}, \"R2_sam\": {\"values\": [{\"id\": 67, \"src\": \"hda\"}]}, \"__current_case__\": 1, \"insert_filter\": {\"__current_case__\": 0, \"filter_select\": \"filter\", \"high\": \"99.9\", \"low\": \"0.1\"}, \"sam_selector\": \"paired\"}}", "options": "{\"debug\": \"false\", \"fraction_invalid\": \"0.2\", \"fraction_valid\": \"0.5\", \"max_errors\": \"10\", \"min_depth\": \"5\", \"no_logfile\": \"false\"}", "chromInfo": "\"/tmp/tmpacfaqf7s/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fasta_file": {"id": "6083f60e8ab5535f", "src": "hda", "uuid": "65d2d396-3ea9-41ee-964a-7b751e0b0849"}, "input|R1_sam": {"id": "1c7e2b77ef2b77ed", "src": "hda", "uuid": "36ea3cc3-d910-450c-8071-7acf82ef2e1f"}, "input|R2_sam": {"id": "79b04b5119063490", "src": "hda", "uuid": "26176395-7cd4-4407-8aeb-cf33bd6cd067"}}, "outputs": {"polished_fasta": {"id": "c045a481717ffa69", "src": "hda", "uuid": "1789dc75-ed18-4715-9054-d2a324c2762a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/3/6/e/dataset_36ea3cc3-d910-450c-8071-7acf82ef2e1f.dat\n  /tmp/tmpacfaqf7s/files/2/6/1/dataset_26176395-7cd4-4407-8aeb-cf33bd6cd067.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n/tmp/tmpacfaqf7s/files/3/6/e/dataset_36ea3cc3-d910-450c-8071-7acf82ef2e1f.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/2/6/1/dataset_26176395-7cd4-4407-8aeb-cf33bd6cd067.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/3/6/e/dataset_36ea3cc3-d910-450c-8071-7acf82ef2e1f.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/2/6/1/dataset_26176395-7cd4-4407-8aeb-cf33bd6cd067.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019897\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  not logging debugging information\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nTime to run: 0:00:00.006102\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/3/6/e/dataset_36ea3cc3-d910-450c-8071-7acf82ef2e1f.dat\n  /tmp/tmpacfaqf7s/files/2/6/1/dataset_26176395-7cd4-4407-8aeb-cf33bd6cd067.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 0.1\n  --high 99.9\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n/tmp/tmpacfaqf7s/files/3/6/e/dataset_36ea3cc3-d910-450c-8071-7acf82ef2e1f.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/2/6/1/dataset_26176395-7cd4-4407-8aeb-cf33bd6cd067.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (0.1st percentile)\nHigh threshold: 526 (99.9th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/3/6/e/dataset_36ea3cc3-d910-450c-8071-7acf82ef2e1f.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/2/6/1/dataset_26176395-7cd4-4407-8aeb-cf33bd6cd067.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.019897\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  not logging debugging information\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:09:56)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nTime to run: 0:00:00.006102\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "test@bx.psu.edu", "job_metrics": []}, "status": "success"}}, {"id": "functional.test_toolbox.TestForTool_polypolish.test_tool_000005", "has_data": true, "data": {"tool_id": "polypolish", "tool_version": "0.5.0+galaxy0", "test_index": 5, "time_seconds": 17.97524070739746, "inputs": {"input|fasta_file": {"src": "hda", "id": "7453c554af824d04"}, "input|sam_data_type|R1_sam": {"src": "hda", "id": "c32d844e83df15a3"}, "input|sam_data_type|R2_sam": {"src": "hda", "id": "e2b4a71b7b6bb456"}, "input|sam_data_type|insert_filter|filter_select": "filter", "input|sam_data_type|insert_filter|high": "98.7", "input|sam_data_type|insert_filter|low": "1", "input|sam_data_type|sam_selector": "paired", "options|debug": false, "options|no_logfile": false}, "job": {"model_class": "Job", "id": "acb6105b121c7555", "state": "ok", "exit_code": 0, "update_time": "2022-09-14T14:10:17.184582", "create_time": "2022-09-14T14:10:13.390826", "galaxy_version": "22.05", "command_version": "Polypolish v0.5.0", "tool_id": "polypolish", "history_id": "0287b2dbc00ee149", "external_id": "96685", "command_line": "ln -s '/tmp/tmpacfaqf7s/files/2/2/9/dataset_229a8e23-2078-4865-8dd8-42e67f8cef43.dat' input_data && polypolish_insert_filter.py --low '1.0' --high '98.7' --in1 '/tmp/tmpacfaqf7s/files/d/7/9/dataset_d79577c6-9282-457b-9f9c-996897a6f1c1.dat' --in2 '/tmp/tmpacfaqf7s/files/f/0/6/dataset_f06a4d35-422e-4906-8e60-c961565306f7.dat' --out1 'filtered_1.sam' --out2 'filtered_2.sam' && polypolish input_data 'filtered_1.sam' 'filtered_2.sam' >  /tmp/tmpacfaqf7s/job_working_directory/000/60/outputs/galaxy_dataset_a69210f1-31ff-4580-8a60-8274d0034cc8.dat", "traceback": null, "params": {"input": "{\"fasta_file\": {\"values\": [{\"id\": 69, \"src\": \"hda\"}]}, \"sam_data_type\": {\"R1_sam\": {\"values\": [{\"id\": 70, \"src\": \"hda\"}]}, \"R2_sam\": {\"values\": [{\"id\": 71, \"src\": \"hda\"}]}, \"__current_case__\": 1, \"insert_filter\": {\"__current_case__\": 0, \"filter_select\": \"filter\", \"high\": \"98.7\", \"low\": \"1.0\"}, \"sam_selector\": \"paired\"}}", "options": "{\"debug\": \"false\", \"fraction_invalid\": \"0.2\", \"fraction_valid\": \"0.5\", \"max_errors\": \"10\", \"min_depth\": \"5\", \"no_logfile\": \"false\"}", "chromInfo": "\"/tmp/tmpacfaqf7s/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fasta_file": {"id": "7453c554af824d04", "src": "hda", "uuid": "229a8e23-2078-4865-8dd8-42e67f8cef43"}, "input|R1_sam": {"id": "c32d844e83df15a3", "src": "hda", "uuid": "d79577c6-9282-457b-9f9c-996897a6f1c1"}, "input|R2_sam": {"id": "e2b4a71b7b6bb456", "src": "hda", "uuid": "f06a4d35-422e-4906-8e60-c961565306f7"}}, "outputs": {"polished_fasta": {"id": "4723d1be54db0b0b", "src": "hda", "uuid": "a69210f1-31ff-4580-8a60-8274d0034cc8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/d/7/9/dataset_d79577c6-9282-457b-9f9c-996897a6f1c1.dat\n  /tmp/tmpacfaqf7s/files/f/0/6/dataset_f06a4d35-422e-4906-8e60-c961565306f7.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 1.0\n  --high 98.7\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n/tmp/tmpacfaqf7s/files/d/7/9/dataset_d79577c6-9282-457b-9f9c-996897a6f1c1.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/f/0/6/dataset_f06a4d35-422e-4906-8e60-c961565306f7.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (1.0th percentile)\nHigh threshold: 526 (98.7th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/d/7/9/dataset_d79577c6-9282-457b-9f9c-996897a6f1c1.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/f/0/6/dataset_f06a4d35-422e-4906-8e60-c961565306f7.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.020513\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  not logging debugging information\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nTime to run: 0:00:00.006472\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/d/7/9/dataset_d79577c6-9282-457b-9f9c-996897a6f1c1.dat\n  /tmp/tmpacfaqf7s/files/f/0/6/dataset_f06a4d35-422e-4906-8e60-c961565306f7.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 1.0\n  --high 98.7\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n/tmp/tmpacfaqf7s/files/d/7/9/dataset_d79577c6-9282-457b-9f9c-996897a6f1c1.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/f/0/6/dataset_f06a4d35-422e-4906-8e60-c961565306f7.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (1.0th percentile)\nHigh threshold: 526 (98.7th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/d/7/9/dataset_d79577c6-9282-457b-9f9c-996897a6f1c1.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/f/0/6/dataset_f06a4d35-422e-4906-8e60-c961565306f7.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.020513\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  not logging debugging information\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:14)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nTime to run: 0:00:00.006472\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "test@bx.psu.edu", "job_metrics": []}, "status": "success"}}, {"id": "functional.test_toolbox.TestForTool_polypolish.test_tool_000006", "has_data": true, "data": {"tool_id": "polypolish", "tool_version": "0.5.0+galaxy0", "test_index": 6, "time_seconds": 17.656880617141724, "inputs": {"input|fasta_file": {"src": "hda", "id": "e63be93f1b9beb7b"}, "input|sam_data_type|R1_sam": {"src": "hda", "id": "881d347ac8baed3b"}, "input|sam_data_type|R2_sam": {"src": "hda", "id": "8a3eb51b1ff8b2af"}, "input|sam_data_type|insert_filter|filter_select": "filter", "input|sam_data_type|insert_filter|high": "96.6", "input|sam_data_type|insert_filter|low": "1.4", "input|sam_data_type|sam_selector": "paired", "options|debug": false, "options|fraction_invalid": "0.5", "options|fraction_valid": "0.6", "options|max_errors": "8", "options|min_depth": "10", "options|no_logfile": false}, "job": {"model_class": "Job", "id": "2b05a76bd786bd52", "state": "ok", "exit_code": 0, "update_time": "2022-09-14T14:10:34.938187", "create_time": "2022-09-14T14:10:31.130748", "galaxy_version": "22.05", "command_version": "Polypolish v0.5.0", "tool_id": "polypolish", "history_id": "073160c7db5a3f3c", "external_id": "97070", "command_line": "ln -s '/tmp/tmpacfaqf7s/files/c/b/0/dataset_cb064898-bc76-41a9-a01c-1273761df57f.dat' input_data && polypolish_insert_filter.py --low '1.4' --high '96.6' --in1 '/tmp/tmpacfaqf7s/files/5/6/8/dataset_56871c3f-28dd-4ab4-a38a-42fbc8824b89.dat' --in2 '/tmp/tmpacfaqf7s/files/0/5/d/dataset_05d5e420-0bbb-4ae1-89e6-1f1e194aa513.dat' --out1 'filtered_1.sam' --out2 'filtered_2.sam' && polypolish input_data 'filtered_1.sam' 'filtered_2.sam' >  /tmp/tmpacfaqf7s/job_working_directory/000/64/outputs/galaxy_dataset_30fdcf47-ff50-4979-9992-4fe2a72e69e5.dat", "traceback": null, "params": {"input": "{\"fasta_file\": {\"values\": [{\"id\": 73, \"src\": \"hda\"}]}, \"sam_data_type\": {\"R1_sam\": {\"values\": [{\"id\": 74, \"src\": \"hda\"}]}, \"R2_sam\": {\"values\": [{\"id\": 75, \"src\": \"hda\"}]}, \"__current_case__\": 1, \"insert_filter\": {\"__current_case__\": 0, \"filter_select\": \"filter\", \"high\": \"96.6\", \"low\": \"1.4\"}, \"sam_selector\": \"paired\"}}", "options": "{\"debug\": \"false\", \"fraction_invalid\": \"0.5\", \"fraction_valid\": \"0.6\", \"max_errors\": \"8\", \"min_depth\": \"10\", \"no_logfile\": \"false\"}", "chromInfo": "\"/tmp/tmpacfaqf7s/galaxy-dev/tool-data/shared/ucsc/chrom/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"fasta_file": {"id": "e63be93f1b9beb7b", "src": "hda", "uuid": "cb064898-bc76-41a9-a01c-1273761df57f"}, "input|R1_sam": {"id": "881d347ac8baed3b", "src": "hda", "uuid": "56871c3f-28dd-4ab4-a38a-42fbc8824b89"}, "input|R2_sam": {"id": "8a3eb51b1ff8b2af", "src": "hda", "uuid": "05d5e420-0bbb-4ae1-89e6-1f1e194aa513"}}, "outputs": {"polished_fasta": {"id": "cb6f3ec699556cfb", "src": "hda", "uuid": "30fdcf47-ff50-4979-9992-4fe2a72e69e5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/5/6/8/dataset_56871c3f-28dd-4ab4-a38a-42fbc8824b89.dat\n  /tmp/tmpacfaqf7s/files/0/5/d/dataset_05d5e420-0bbb-4ae1-89e6-1f1e194aa513.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 1.4\n  --high 96.6\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n/tmp/tmpacfaqf7s/files/5/6/8/dataset_56871c3f-28dd-4ab4-a38a-42fbc8824b89.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/0/5/d/dataset_05d5e420-0bbb-4ae1-89e6-1f1e194aa513.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (1.4th percentile)\nHigh threshold: 467 (96.6th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/5/6/8/dataset_56871c3f-28dd-4ab4-a38a-42fbc8824b89.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/0/5/d/dataset_05d5e420-0bbb-4ae1-89e6-1f1e194aa513.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.020233\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  not logging debugging information\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nTime to run: 0:00:00.006467\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n\u001b[93m\u001b[1m\u001b[4mPolypolish insert size alignment filter\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    This script is a pre-processing filter that can be run on SAM alignments\u001b[0m\n\u001b[2mbefore they are used in Polypolish. It looks at each read pair and flags\u001b[0m\n\u001b[2malignments that do not seem to be part of a concordant pair. This can improve\u001b[0m\n\u001b[2mthe accuracy of Polypolish, especially near the edges of repeats.\u001b[0m\n\nInput alignments:\n  /tmp/tmpacfaqf7s/files/5/6/8/dataset_56871c3f-28dd-4ab4-a38a-42fbc8824b89.dat\n  /tmp/tmpacfaqf7s/files/0/5/d/dataset_05d5e420-0bbb-4ae1-89e6-1f1e194aa513.dat\n\nOutput alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --orientation auto\n  --low 1.4\n  --high 96.6\n\n\n\u001b[93m\u001b[1m\u001b[4mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n/tmp/tmpacfaqf7s/files/5/6/8/dataset_56871c3f-28dd-4ab4-a38a-42fbc8824b89.dat: 75 alignments from 72 reads\n/tmp/tmpacfaqf7s/files/0/5/d/dataset_05d5e420-0bbb-4ae1-89e6-1f1e194aa513.dat: 64 alignments from 62 reads\n\n\n\u001b[93m\u001b[1m\u001b[4mFinding insert size thresholds\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    Read pairs with exactly one alignment per read are used to determine the\u001b[0m\n\u001b[2morientation and insert size thresholds for the read set.\u001b[0m\n\nfr: 39 pairs\nrf: 19 pairs\nff: 0 pairs\nrr: 0 pairs\n\nAutomatically determined correct orientation: fr\n\nLow threshold:  34 (1.4th percentile)\nHigh threshold: 467 (96.6th percentile)\n\n\n\u001b[93m\u001b[1m\u001b[4mFiltering SAM files\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    Read alignments that are part of a good pair (correct orientation and\u001b[0m\n\u001b[2minsert size) pass the filter and are written unaltered to the output file. Read\u001b[0m\n\u001b[2malignments which are not part of good pair are written to the output file with\u001b[0m\n\u001b[2ma \"ZP:Z:fail\" tag so Polypolish will not use them.\u001b[0m\n\nFiltering /tmp/tmpacfaqf7s/files/5/6/8/dataset_56871c3f-28dd-4ab4-a38a-42fbc8824b89.dat:\n  1,408 pass\n  4 fail\n\nFiltering /tmp/tmpacfaqf7s/files/0/5/d/dataset_05d5e420-0bbb-4ae1-89e6-1f1e194aa513.dat:\n  1,220 pass\n  3 fail\n\n\n\u001b[93m\u001b[1m\u001b[4mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\nAlignments before filtering: 139\nAlignments after filtering:  2,628\n\nTime to run: 0:00:00.020233\n\n\n\u001b[1;4;93mStarting Polypolish\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    Polypolish is a tool for polishing genome assemblies with short reads.\nUnlike other tools in this category, Polypolish uses SAM files where each read\nhas been aligned to all possible locations (not just a single best location).\nThis allows it to repair errors in repeat regions that other alignment-based\npolishers cannot fix.\u001b[0m\n\nPolypolish version: 0.5.0\n\nInput assembly:\n  input_data\n\nInput short-read alignments:\n  filtered_1.sam\n  filtered_2.sam\n\nSettings:\n  --fraction_invalid 0.2\n  --fraction_valid 0.5\n  --max_errors 10\n  --min_depth 5\n  not logging debugging information\n\n\n\u001b[1;4;93mLoading assembly\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\ncontig00001 (5,513 bp)\ncontig00002 (3,532 bp)\ncontig00003 (3,227 bp)\ncontig00004 (3,138 bp)\n\n\n\u001b[1;4;93mLoading alignments\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\nfiltered_1.sam: 75 alignments from 72 reads\nfiltered_2.sam: 64 alignments from 62 reads\n\nFiltering for high-quality end-to-end alignments:\n  48 alignments kept\n  91 alignments discarded\n\n\n\u001b[1;4;93mPolishing assembly sequences\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\n\u001b[2m    For each position in the assembly, Polypolish determines the read depth\nat that position and collects all aligned bases. It then polishes the assembly\nby looking for positions where the pileup unambiguously supports a different\nsequence than the assembly.\u001b[0m\n\nPolishing contig00001 (5,513 bp):\n  mean read depth: 1.9x\n  1,751 bp have a depth of zero (68.2387% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00002 (3,532 bp):\n  mean read depth: 0.7x\n  2,280 bp have a depth of zero (35.4473% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00003 (3,227 bp):\n  mean read depth: 0.3x\n  2,652 bp have a depth of zero (17.8184% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\nPolishing contig00004 (3,138 bp):\n  mean read depth: 0.2x\n  2,699 bp have a depth of zero (13.9898% coverage)\n  0 positions changed (0.0000% of total positions)\n  estimated pre-polishing sequence accuracy: 100.0000%\n\n\n\u001b[1;4;93mFinished!\u001b[0m \u001b[2m(2022-09-14 14:10:32)\u001b[0m\nPolished sequence (to stdout):\n  contig00001_polypolish (5,513 bp)\n  contig00002_polypolish (3,532 bp)\n  contig00003_polypolish (3,227 bp)\n  contig00004_polypolish (3,138 bp)\n\nTime to run: 0:00:00.006467\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "test@bx.psu.edu", "job_metrics": []}, "status": "success"}}], "summary": {"num_tests": 7, "num_failures": 0, "num_errors": 0, "num_skips": 0}, "exit_code": 0}